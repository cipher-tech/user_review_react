{"version":3,"sources":["components/addReview/addReview.jsx","components/showReviews/showReviews.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddReview","showAddReview","socket","useState","rating","setRating","comment","setComment","error","setError","message","setMessage","handleSubmit","e","a","fetch","method","headers","body","JSON","stringify","then","res","json","emit","catch","className","id","map","value","Number","onDoubleClick","onClick","onChange","target","type","placeholder","ShowReviews","reviews","setReviews","avgRating","setAvgRating","showSpinner","setShowSpinner","useEffect","data","totalRating","reduce","counter","averageRating","length","toFixed","on","displayStars","number","stars","i","review","index","Math","floor","_id","io","App","setShowAddReview","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fce1677.chunk.js","sourcesContent":["import { useState } from \"react\"\n\nconst AddReview = ({ showAddReview, socket }) => {\n    const [rating, setRating] = useState(1.2)\n    const [comment, setComment] = useState('')\n    const [error, setError] = useState(null)\n    const [message, setMessage] = useState(null)\n\n    const ratingValue = [1, 2, 3, 4, 5]\n\n    const handleSubmit = async (e) => {\n        await setError(null)\n        await setMessage(null)\n        fetch('https://user-review-server.herokuapp.com/add_review', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ rating, comment })\n        })\n            .then(async (res) => {\n                res.json()\n                await setMessage(\"review submitted\")\n                await socket.emit(\"review_added\")\n                await showAddReview(false)\n            })\n            .catch(error => {\n                setError('could not add review')\n            })\n    }\n    return (\n        <div className=\"container\">\n            {error ? <p className=\"error\">{error} </p> : null}\n            {message ? <p className=\"success\">{message}</p> : null}\n            <h2 className=\"header\">Whatâ€™s your rating?</h2>\n            <h4 className=\"sub-header\">Rating\n                <small>double click to add half star</small>\n            </h4>\n            <p className=\"container-rating_star\">\n                <span id=\"star_rating\">\n                    {\n                        ratingValue.map((value) => {\n                            return (\n                                (value <= Number(rating)) ?\n                                    <i key={value}\n                                        onDoubleClick={() => setRating(`${value - Number(0.5)}`)}\n                                        onClick={() => setRating(value)}\n                                        className={`fas ${value - Number(rating) === 0.5 ? \"fa-star-half-alt\" : \"fa-star\"} star_yellow`}>\n                                    </i>\n                                    :\n                                    <i key={value}\n                                        onDoubleClick={() => (\n                                            setRating(`${value - Number(0.5)}`)\n                                        )} onClick={() => setRating(value)}\n                                        className={`fas ${value - Number(rating) === 0.5 ? \"fa-star-half-alt star_yellow\" : \"fa-star star_ash\"}`}>\n\n                                    </i>\n                            )\n                        })\n                    }\n                </span>\n            </p>\n            <h4 className=\"sub-header\">Review</h4>\n\n            <input onChange={(e) => setComment(e.target.value)} value={comment} className=\"container-input\" type=\"text\" placeholder=\"Start typing....\" />\n\n            <button id=\"submit\" onClick={handleSubmit} className=\"rating-button container-button\">Submit review</button>\n        </div>\n    )\n}\n\nexport default AddReview\n","import React, { useEffect, useState } from 'react'\n\nconst ShowReviews = ({ showAddReview, socket }) => {\n    const [reviews, setReviews] = useState([])\n    const [avgRating, setAvgRating] = useState(1)\n    const [showSpinner, setShowSpinner] = useState(true)\n    const [error, setError] = useState('')\n\n    useEffect(() => {\n\n        fetch('https://user-review-server.herokuapp.com/get_reviews', {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        })\n            .then(async (res) => {\n                const data = await res.json()\n                await setReviews(data)\n\n                const totalRating = data.reduce((counter, value) => {\n                    return counter + value.rating\n                }, 0)\n                const averageRating = totalRating / data.length\n                setAvgRating(averageRating.toFixed(1))\n                setShowSpinner(false)\n            })\n            .catch(error => {\n                setError('could not get reviews')\n            })\n\n        socket.on(\"New_review\", async (data) => {\n            await setReviews(data.reviews || [])\n        })\n\n    }, [socket])\n\n    const displayStars = (number) => {\n        let stars = []\n        for (let i = 1; i < 6; i++) {\n            if ((i) <= number) {\n                stars[i] = <i key={i} className={`fas ${i - Number(number) === 0.5 ? \"fa-star-half-alt\" : \"fa-star\"} star_yellow`}></i>\n            } else {\n                stars[i] = <i key={i} className={`fas ${i - Number(number) === 0.5 ? \"fa-star-half-alt star_yellow\" : \"fa-star star_ash\"}`}></i>\n            }\n        }\n        return stars\n    }\n\n    return (\n        showSpinner ?\n            <i className=\"fas fa-spinner spinner\"></i>\n            :\n            <div className=\"container\">\n                <p> {error} </p>\n                <h2 className=\"header\">The Minimalist Entrepreneur</h2>\n                <div className=\"rating\">\n                    <div className=\"rating-overview\">\n                        <p id=\"averageRating\" className=\"rating-overview_rating_number\">{avgRating}</p>\n                        <p className=\"rating-overview_rating_star\">\n                            <span id=\"avgStarRating\">\n                                {displayStars(avgRating)}\n                            </span>\n\n                        </p>\n                    </div>\n                    <button onClick={() => showAddReview(true)} className=\"rating-button\">Add review</button>\n                </div>\n\n                <div id=\"allReviews\" className=\"reviews\">\n                    <h2 className=\"reviews-header\">Reviews</h2>\n\n                    {\n                        reviews.map((review, index) => (\n                            <div key={review._id} className=\"review-single\">\n                                <p className=\"rating-overview_rating_star\">\n                                    <span>\n                                        {displayStars(Math.floor(review.rating))}\n                                    </span>\n                                </p>\n\n                                <p className=\"review-single__info\">\n                                    <span> {Math.floor(review.rating)}, </span> {review.comment}\n                                </p>\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n    )\n}\n\nexport default ShowReviews\n","import { useState } from 'react';\nimport './App.css';\nimport AddReview from './components/addReview/addReview';\nimport ShowReviews from './components/showReviews/showReviews';\nimport io from \"socket.io-client\";\n \nconst socket = io('https://user-review-server.herokuapp.com');\n\nfunction App() {\n\n  const [showAddReview, setShowAddReview] = useState(false)\n  return (\n    <> \n      {\n        showAddReview ?\n          <AddReview socket={socket} showAddReview={setShowAddReview}/>\n          :\n          <ShowReviews socket={socket} showAddReview={setShowAddReview} />\n      }\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}